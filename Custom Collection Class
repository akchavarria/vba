''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'README
'Use this as a Template, and search-replace Person / People. I wish it were as easy as dropping the
'code into a new Class module, but you’ll need to do this little workaround instead. You see, we
'need a few Attribute modifiers to alter the behaviour of two important properties, and it’s not
'possible to edit Attribute modifiers from VBA’s User Interface. If you didn’t attach the Attribute
'modifiers, the Item property would not be the default property, and you would lose the ability to
'For Each / Next on the Collection. So, using Notepad, save the following code as People.cls, then
'from VBA > File > Import File, and import People.cls.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
End
Attribute VB_Name = "People"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

Private colPeople As Collection

Private Sub Class_Initialize()
    Set colPeople = New Collection
End Sub

Private Sub Class_Terminate()
    Set colPeople = Nothing
End Sub

Public Property Get NewEnum() As IUnknown
Attribute NewEnum.VB_UserMemId = -4
Attribute NewEnum.VB_MemberFlags = "40"
    Set NewEnum = colPeople.[_NewEnum]
End Property

Public Sub Add(obj As Person)
    colPeople.Add obj
End Sub

Public Sub Remove(Index As Variant)
    colPeople.Remove Index
End Sub

Public Property Get Item(Index As Variant) As Person
Attribute Item.VB_UserMemId = 0
    Set Item = colPeople.Item(Index)
End Property

Property Get Count() As Long
    Count = colPeople.Count
End Property

Public Sub Clear()
    Set colPeople = New Collection
End Sub
